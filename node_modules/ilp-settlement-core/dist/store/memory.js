"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const bignumber_js_1 = __importDefault(require("bignumber.js"));
exports.createMemoryStore = () => {
    const accounts = new Map();
    const self = {
        async createAccount(accountId) {
            return (accounts.has(accountId) ||
                !accounts.set(accountId, {
                    settlementRequests: new Map(),
                    queuedSettlements: new bignumber_js_1.default(0),
                    uncreditedSettlements: new bignumber_js_1.default(0)
                }));
        },
        async isExistingAccount(accountId) {
            return accounts.has(accountId);
        },
        async deleteAccount(accountId) {
            accounts.delete(accountId);
        },
        async queueSettlement(accountId, idempotencyKey, amount) {
            const account = accounts.get(accountId);
            if (!account) {
                throw new Error('Account does not exist');
            }
            const amountQueued = account.settlementRequests.get(idempotencyKey);
            if (amountQueued) {
                return amountQueued;
            }
            account.settlementRequests.set(idempotencyKey, amount);
            account.queuedSettlements = account.queuedSettlements.plus(amount);
            return amount;
        },
        async loadAmountToSettle(accountId) {
            const account = accounts.get(accountId);
            if (!account) {
                throw new Error('Account does not exist');
            }
            const amount = account.queuedSettlements;
            account.queuedSettlements = new bignumber_js_1.default(0);
            return amount;
        },
        async saveAmountToSettle(accountId, amount) {
            const account = accounts.get(accountId);
            if (!account) {
                throw new Error('Account does not exist');
            }
            account.queuedSettlements = account.queuedSettlements.plus(amount);
        },
        async loadAmountToCredit(accountId) {
            const account = accounts.get(accountId);
            if (!account) {
                throw new Error('Account does not exist');
            }
            const amount = account.uncreditedSettlements;
            account.uncreditedSettlements = new bignumber_js_1.default(0);
            return amount;
        },
        async saveAmountToCredit(accountId, amount) {
            const account = accounts.get(accountId);
            if (!account) {
                throw new Error('Account does not exist');
            }
            account.uncreditedSettlements = account.uncreditedSettlements.plus(amount);
        }
    };
    return self;
};
//# sourceMappingURL=memory.js.map