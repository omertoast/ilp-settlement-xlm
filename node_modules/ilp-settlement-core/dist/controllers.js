"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const debug_1 = __importDefault(require("debug"));
const store_1 = require("./store");
const quantity_1 = require("./utils/quantity");
const v4_1 = __importDefault(require("uuid/v4"));
const log = debug_1.default('settlement-core');
exports.createController = ({ store, engine, services }) => ({
    setupAccount: async (req, res) => {
        const accountId = req.body.id || v4_1.default();
        if (!store_1.isSafeKey(accountId)) {
            return res.status(400).send('Account ID includes unsafe characters');
        }
        try {
            await store.createAccount(accountId);
        }
        catch (err) {
            log(`Failed to setup account: account=${accountId}`, err);
            return res.sendStatus(500);
        }
        if (engine.setupAccount) {
            try {
                await engine.setupAccount(accountId);
            }
            catch (err) {
                log(`Failed to setup account: account=${accountId}`, err);
                return res.sendStatus(500);
            }
        }
        res.status(201).send({
            id: accountId
        });
    },
    validateAccount: async (req, res, next) => {
        const accountId = req.params.id;
        if (!store_1.isSafeKey(accountId)) {
            return res.status(400).send('Account ID is missing or includes unsafe characters');
        }
        const accountExists = await store.isExistingAccount(accountId);
        return !accountExists ? res.status(404).send(`Account doesn't exist`) : next();
    },
    settleAccount: async (req, res) => {
        const accountId = req.params.id;
        let details = `account=${accountId}`;
        const idempotencyKey = req.get('Idempotency-Key');
        if (!store_1.isSafeKey(idempotencyKey)) {
            log(`Request to settle failed: idempotency key missing or unsafe: ${details}`);
            return res.status(400).send('Idempotency key missing or includes unsafe characters');
        }
        details += ` idempotencyKey=${idempotencyKey}`;
        const requestQuantity = req.body;
        if (!quantity_1.isQuantity(requestQuantity)) {
            log(`Request to settle failed: invalid quantity: ${details}`);
            return res.status(400).send('Quantity to settle is invalid');
        }
        const amountToQueue = quantity_1.fromQuantity(requestQuantity);
        details += ` amount=${amountToQueue}`;
        if (amountToQueue.isZero()) {
            log(`Request to settle failed: amount is 0: ${details}`);
            return res.status(400).send('Amount to settle is 0');
        }
        let amountQueued;
        try {
            amountQueued = await store.queueSettlement(accountId, idempotencyKey, amountToQueue);
        }
        catch (err) {
            log(`Error: Failed to queue settlement: ${details}`, err);
            return res.sendStatus(500);
        }
        if (!amountToQueue.isEqualTo(amountQueued)) {
            log(`Request to settle failed: client reused idempotency key: ${details} previousAmount=${amountQueued}`);
            return res.status(400).send('Idempotency key was reused with a different amount');
        }
        res.status(201).send(requestQuantity);
        services.trySettlement(accountId);
    },
    handleMessage: async (req, res) => {
        const accountId = req.params.id;
        if (!engine.handleMessage) {
            log(`Received incoming message that settlement engine cannot handle: account=${accountId}`);
            return res.status(400).send('Settlement engine does not support incoming messages');
        }
        try {
            const response = await engine.handleMessage(accountId, JSON.parse(req.body));
            const rawResponse = Buffer.from(JSON.stringify(response));
            res.status(201).send(rawResponse);
        }
        catch (err) {
            log(`Error while handling message: account=${accountId}`, err);
            res.sendStatus(500);
        }
    },
    deleteAccount: async (req, res) => {
        const accountId = req.params.id;
        try {
            if (engine.closeAccount) {
                await engine.closeAccount(accountId);
            }
            await store.deleteAccount(accountId);
            res.sendStatus(204);
        }
        catch (err) {
            log(`Failed to delete account: account=${accountId}`, err);
            res.sendStatus(500);
        }
    }
});
//# sourceMappingURL=controllers.js.map